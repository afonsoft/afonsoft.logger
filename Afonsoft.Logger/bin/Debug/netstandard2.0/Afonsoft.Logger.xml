<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Afonsoft.Logger</name>
    </assembly>
    <members>
        <member name="T:Afonsoft.Logger.AfonsoftLoggerExtensions">
            <summary>
            LoggerExtensions
            </summary>
        </member>
        <member name="M:Afonsoft.Logger.AfonsoftLoggerExtensions.AddAfonsoftLoggerProvider``1(Microsoft.Extensions.Logging.ILoggingBuilder)">
            <summary>
            ILoggingBuilder AddAfonsoftLoggerProvider
            </summary>
            <typeparam name="T"></typeparam>
            <param name="builder"></param>
            <returns></returns>
        </member>
        <member name="M:Afonsoft.Logger.AfonsoftLoggerExtensions.AddAfonsoftLoggerProvider``1(Microsoft.Extensions.Logging.ILoggingBuilder,System.Action{Afonsoft.Logger.AfonsoftLoggerOptions})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="builder"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Afonsoft.Logger.AfonsoftLoggerExtensions.AddAfonsoftLoggerProvider(Microsoft.Extensions.Logging.ILoggingBuilder)">
            <summary>
            ILoggingBuilder AddAfonsoftLoggerProvider
            </summary>
            <param name="builder"></param>
            <returns></returns>
        </member>
        <member name="M:Afonsoft.Logger.AfonsoftLoggerExtensions.AddAfonsoftLoggerProvider(Microsoft.Extensions.Logging.ILoggingBuilder,System.Action{Afonsoft.Logger.AfonsoftLoggerOptions})">
            <summary>
            
            </summary>
            <param name="builder"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Afonsoft.Logger.AfonsoftLoggerExtensions.AddAfonsoftLogging``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            IServiceCollection AddAfonsoftLogging
            </summary>
            <typeparam name="T"></typeparam>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="M:Afonsoft.Logger.AfonsoftLoggerExtensions.AddAfonsoftLogging(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            IServiceCollection AddAfonsoftLogging
            </summary>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="M:Afonsoft.Logger.AfonsoftLoggerExtensions.AddAfonsoftLogging``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Afonsoft.Logger.AfonsoftLoggerOptions})">
            <summary>
            IServiceCollection AddAfonsoftLogging
            </summary>
            <typeparam name="T"></typeparam>
            <param name="services"></param>
            <param name="configure"></param>
            <returns></returns>
        </member>
        <member name="M:Afonsoft.Logger.AfonsoftLoggerExtensions.AddAfonsoftLogging(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Afonsoft.Logger.AfonsoftLoggerOptions})">
            <summary>
            IServiceCollection AddAfonsoftLogging
            </summary>
            <param name="services"></param>
            <param name="configure"></param>
            <returns></returns>
        </member>
        <member name="T:Afonsoft.Logger.AfonsoftLoggerOptions">
            <summary>
            Options for file logging.
            </summary>
        </member>
        <member name="P:Afonsoft.Logger.AfonsoftLoggerOptions.FlushPeriod">
            <summary>
            Gets or sets the period after which logs will be flushed to the store.
            </summary>
        </member>
        <member name="P:Afonsoft.Logger.AfonsoftLoggerOptions.BackgroundQueueSize">
            <summary>
            Gets or sets the maximum size of the background log message queue or null for no limit.
            After maximum queue size is reached log event sink would start blocking.
            Defaults to <c>1000</c>.
            </summary>
        </member>
        <member name="P:Afonsoft.Logger.AfonsoftLoggerOptions.BatchSize">
            <summary>
            Gets or sets a maximum number of events to include in a single batch or null for no limit.
            </summary>
            Defaults to <c>null</c>.
        </member>
        <member name="P:Afonsoft.Logger.AfonsoftLoggerOptions.IsEnabled">
            <summary>
            Gets or sets value indicating if logger accepts and queues writes.
            </summary>
        </member>
        <member name="P:Afonsoft.Logger.AfonsoftLoggerOptions.LogLevel">
            <summary>
            LogLevel
            </summary>
        </member>
        <member name="P:Afonsoft.Logger.AfonsoftLoggerOptions.IncludeScopes">
            <summary>
            Gets or sets a value indicating whether scopes should be included in the message.
            Defaults to <c>false</c>.
            </summary>
        </member>
        <member name="P:Afonsoft.Logger.AfonsoftLoggerOptions.FileSizeLimit">
            <summary>
            Gets or sets a strictly positive value representing the maximum log size in bytes or null for no limit.
            Once the log is full, no more messages will be appended.
            Defaults to <c>40MB</c>.
            </summary>
        </member>
        <member name="P:Afonsoft.Logger.AfonsoftLoggerOptions.RetainedFileCountLimit">
            <summary>
            Gets or sets a strictly positive value representing the maximum retained file count or null for no limit.
            Defaults to <c>2</c>.
            </summary>
        </member>
        <member name="P:Afonsoft.Logger.AfonsoftLoggerOptions.FileName">
            <summary>
            Gets or sets the filename prefix to use for log files.
            Defaults to <c>logs-</c>.
            </summary>
        </member>
        <member name="P:Afonsoft.Logger.AfonsoftLoggerOptions.Extension">
            <summary>
            Gets or sets the filename extension to use for log files.
            Defaults to <c>txt</c>.
            Will strip any prefixed .
            </summary>
        </member>
        <member name="P:Afonsoft.Logger.AfonsoftLoggerOptions.Periodicity">
            <summary>
            Gets or sets the periodicity for rolling over log files.
            </summary>
        </member>
        <member name="P:Afonsoft.Logger.AfonsoftLoggerOptions.LogDirectory">
            <summary>
            The directory in which log files will be written, relative to the app process.
            Default to <c>Logs</c>
            </summary>
            <returns></returns>
        </member>
        <member name="P:Afonsoft.Logger.AfonsoftLoggerOptions.Value">
            <summary>
            Value
            </summary>
        </member>
        <member name="T:Afonsoft.Logger.AfonsoftLoggerProvider">
             <summary>
            AfonsoftLoggerProvider
             LoggerProvider : ILoggerProvider 
             </summary>
        </member>
        <member name="M:Afonsoft.Logger.AfonsoftLoggerProvider.#ctor(Microsoft.Extensions.Options.IOptionsMonitor{Afonsoft.Logger.AfonsoftLoggerOptions})">
            <summary>
            AfonsoftLoggerProvider
            </summary>
            <param name="options"></param>
        </member>
        <member name="M:Afonsoft.Logger.AfonsoftLoggerProvider.#ctor(System.Action{Afonsoft.Logger.AfonsoftLoggerOptions})">
            <summary>
            AfonsoftLoggerProvider
            </summary>
            <param name="options"></param>
        </member>
        <member name="M:Afonsoft.Logger.AfonsoftLoggerProvider.#ctor(Afonsoft.Logger.AfonsoftLoggerOptions)">
            <summary>
            AfonsoftLoggerProvider
            </summary>
            <param name="options"></param>
        </member>
        <member name="M:Afonsoft.Logger.AfonsoftLoggerProvider.#ctor">
            <summary>
            AfonsoftLoggerProvider
            </summary>
        </member>
        <member name="M:Afonsoft.Logger.AfonsoftLoggerProvider.CreateLogger(System.String)">
            <summary>
            CreateLogger
            </summary>
            <param name="categoryName"></param>
            <returns></returns>
        </member>
        <member name="M:Afonsoft.Logger.AfonsoftLoggerProvider.CreateLogger``1">
            <summary>
            CreateLogger
            </summary>
            <typeparam name="T1"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Afonsoft.Logger.AfonsoftLoggerProvider`1">
             <summary>
            AfonsoftLoggerProvider
             LoggerProvider : ILoggerProvider 
             </summary>
        </member>
        <member name="M:Afonsoft.Logger.AfonsoftLoggerProvider`1.#ctor(Microsoft.Extensions.Options.IOptionsMonitor{Afonsoft.Logger.AfonsoftLoggerOptions})">
            <summary>
            AfonsoftLoggerProvider
            </summary>
            <param name="options"></param>
        </member>
        <member name="M:Afonsoft.Logger.AfonsoftLoggerProvider`1.#ctor(System.Action{Afonsoft.Logger.AfonsoftLoggerOptions})">
            <summary>
            AfonsoftLoggerProvider
            </summary>
            <param name="options"></param>
        </member>
        <member name="M:Afonsoft.Logger.AfonsoftLoggerProvider`1.#ctor(Afonsoft.Logger.AfonsoftLoggerOptions)">
            <summary>
            AfonsoftLoggerProvider
            </summary>
            <param name="options"></param>
        </member>
        <member name="M:Afonsoft.Logger.AfonsoftLoggerProvider`1.#ctor">
            <summary>
            AfonsoftLoggerProvider
            </summary>
        </member>
        <member name="M:Afonsoft.Logger.AfonsoftLoggerProvider`1.CreateLogger(System.String)">
            <summary>
            CreateLogger
            </summary>
            <param name="categoryName"></param>
            <returns></returns>
        </member>
        <member name="M:Afonsoft.Logger.AfonsoftLoggerProvider`1.CreateLogger">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Afonsoft.Logger.AfonsoftLoggerProvider`1.CreateLogger``1">
            <summary>
            CreateLogger
            </summary>
            <typeparam name="T1"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Afonsoft.Logger.Internal.BatchingLoggerProvider">
            <summary>
            BatchingLoggerProvider
            </summary>
        </member>
        <member name="M:Afonsoft.Logger.Internal.BatchingLoggerProvider.#ctor(Microsoft.Extensions.Options.IOptionsMonitor{Afonsoft.Logger.AfonsoftLoggerOptions})">
            <summary>
            BatchingLoggerProvider
            </summary>
            <param name="options"></param>
        </member>
        <member name="P:Afonsoft.Logger.Internal.BatchingLoggerProvider.IsEnabled">
            <summary>
            IsEnabled
            </summary>
        </member>
        <member name="P:Afonsoft.Logger.Internal.BatchingLoggerProvider.LogLevel">
            <summary>
            LogLevel
            </summary>
        </member>
        <member name="M:Afonsoft.Logger.Internal.BatchingLoggerProvider.WriteMessagesAsync(System.Collections.Generic.IEnumerable{Afonsoft.Logger.Internal.LogMessage},System.Threading.CancellationToken)">
            <summary>
            WriteMessagesAsync
            </summary>
            <param name="messages"></param>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="M:Afonsoft.Logger.Internal.BatchingLoggerProvider.RollFiles">
            <summary>
            Deletes old log files, keeping a number of files defined by <see cref="P:Afonsoft.Logger.AfonsoftLoggerOptions.RetainedFileCountLimit" />
            </summary>
        </member>
        <member name="M:Afonsoft.Logger.Internal.BatchingLoggerProvider.IntervalAsync(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            IntervalAsync
            </summary>
            <param name="interval"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Afonsoft.Logger.Internal.BatchingLoggerProvider.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="M:Afonsoft.Logger.Internal.BatchingLoggerProvider.CreateLogger(System.String)">
            <summary>
            CreateLogger
            </summary>
            <param name="categoryName"></param>
            <returns></returns>
        </member>
        <member name="M:Afonsoft.Logger.Internal.BatchingLoggerProvider.CreateLogger``1">
            <summary>
            CreateLogger
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Afonsoft.Logger.Internal.LogMessage">
            <summary>
            LogMessage
            </summary>
        </member>
        <member name="P:Afonsoft.Logger.Internal.LogMessage.Timestamp">
            <summary>
            Timestamp
            </summary>
        </member>
        <member name="P:Afonsoft.Logger.Internal.LogMessage.CategoryName">
            <summary>
            CategoryName
            </summary>
        </member>
        <member name="P:Afonsoft.Logger.Internal.LogMessage.MethodBase">
            <summary>
            MethodBase
            </summary>
        </member>
        <member name="P:Afonsoft.Logger.Internal.LogMessage.Type">
            <summary>
            MethodBase
            </summary>
        </member>
        <member name="P:Afonsoft.Logger.Internal.LogMessage.TypeTState">
            <summary>
            TypeTState
            </summary>
        </member>
        <member name="P:Afonsoft.Logger.Internal.LogMessage.DebugLevel">
            <summary>
            Type
            </summary>
        </member>
        <member name="P:Afonsoft.Logger.Internal.LogMessage.Message">
            <summary>
            Message
            </summary>
        </member>
        <member name="P:Afonsoft.Logger.Internal.LogMessage.Exception">
            <summary>
            Exception
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Afonsoft.Logger.Logger" -->
        <member name="M:Afonsoft.Logger.Logger.#ctor">
            <summary>
            Logger
            </summary>
        </member>
        <member name="M:Afonsoft.Logger.Logger.#ctor(Microsoft.Extensions.Logging.ILoggerProvider,System.String)">
            <summary>
            
            </summary>
            <param name="provider"></param>
            <param name="categoryName"></param>
        </member>
        <member name="M:Afonsoft.Logger.Logger.Log``1(Microsoft.Extensions.Logging.LogLevel,Microsoft.Extensions.Logging.EventId,``0,System.Exception,System.Func{``0,System.Exception,System.String})">
            <summary>
            
            </summary>
            <typeparam name="TState"></typeparam>
            <param name="logLevel"></param>
            <param name="eventId"></param>
            <param name="state"></param>
            <param name="exception"></param>
            <param name="formatter"></param>
        </member>
        <member name="M:Afonsoft.Logger.Logger.IsEnabled(Microsoft.Extensions.Logging.LogLevel)">
            <summary>
            
            </summary>
            <param name="logLevel"></param>
            <returns></returns>
        </member>
        <member name="M:Afonsoft.Logger.Logger.BeginScope``1(``0)">
            <summary>
            
            </summary>
            <typeparam name="TState"></typeparam>
            <param name="state"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Afonsoft.Logger.Logger`1" -->
        <member name="M:Afonsoft.Logger.Logger`1.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Afonsoft.Logger.Logger`1.#ctor(Microsoft.Extensions.Logging.ILoggerProvider,System.String)">
            <summary>
            Logger
            </summary>
            <param name="provider"></param>
            <param name="categoryName"></param>
        </member>
        <member name="M:Afonsoft.Logger.Logger`1.#ctor(Microsoft.Extensions.Logging.ILoggerProvider)">
            <summary>
            Logger
            </summary>
            <param name="provider"></param>
        </member>
        <member name="M:Afonsoft.Logger.Logger`1.Log``1(Microsoft.Extensions.Logging.LogLevel,Microsoft.Extensions.Logging.EventId,``0,System.Exception,System.Func{``0,System.Exception,System.String})">
            <summary>
            
            </summary>
            <typeparam name="TState"></typeparam>
            <param name="logLevel"></param>
            <param name="eventId"></param>
            <param name="state"></param>
            <param name="exception"></param>
            <param name="formatter"></param>
        </member>
        <member name="M:Afonsoft.Logger.Logger`1.IsEnabled(Microsoft.Extensions.Logging.LogLevel)">
            <summary>
            
            </summary>
            <param name="logLevel"></param>
            <returns></returns>
        </member>
        <member name="M:Afonsoft.Logger.Logger`1.BeginScope``1(``0)">
            <summary>
            
            </summary>
            <typeparam name="TState"></typeparam>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="T:Afonsoft.Logger.Rolling.PeriodicityOptions">
            <summary>
            PeriodicityOptions
            </summary>
        </member>
        <member name="F:Afonsoft.Logger.Rolling.PeriodicityOptions.Daily">
            <summary>
            Daily
            </summary>
        </member>
        <member name="F:Afonsoft.Logger.Rolling.PeriodicityOptions.Hourly">
            <summary>
            Hourly
            </summary>
        </member>
        <member name="F:Afonsoft.Logger.Rolling.PeriodicityOptions.Minutely">
            <summary>
            Minutely
            </summary>
        </member>
        <member name="F:Afonsoft.Logger.Rolling.PeriodicityOptions.Monthly">
            <summary>
            Monthly
            </summary>
        </member>
        <member name="F:Afonsoft.Logger.Rolling.PeriodicityOptions.None">
            <summary>
            None
            </summary>
        </member>
    </members>
</doc>
